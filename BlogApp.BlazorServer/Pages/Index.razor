@page "/"
@using BlogApp.BlazorServer.Models
@using BlogApp.BlazorServer.Services
@inject BlogService BlogService
@inject PostService PostService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IAuthorizationService AuthorizationService
@inject AuthenticationStateProvider AuthenticationStateProvider

<h1>Blog List</h1>
<button @onclick="CreateBlog">Create Blog</button>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
        <button type="button" class="close" aria-label="Close" @onclick="ClearErrorMessage">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}

@if (blogs == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Blog Name</th>
            <th>Description</th>
            <th>Created By</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var blog in blogs)
        {
            <tr>
                <td>
                    <a href="blog-posts/@blog.BlogId">@blog.Title</a>
                </td>
                <td>@blog.Description</td>
                <td>@blog.Username</td>
                <td>
                    <a href="edit-blog/@blog.BlogId">Edit</a>
                    <button @onclick="() => ConfirmDelete(blog)">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}


@code {
    private IEnumerable<BlogDto> blogs;
    private string errorMessage;

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        blogs = await BlogService.GetBlogs();
    }

    private void CreateBlog()
    {
        NavigationManager.NavigateTo("create-blog");
    }

    private async Task ConfirmDelete(BlogDto blog)
    {
        var authState = await AuthenticationStateTask;
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            string returnUrl = Uri.EscapeDataString(NavigationManager.Uri);
            NavigationManager.NavigateTo($"/login?returnUrl={returnUrl}");
            return;
        }

        var authorizationResult = await AuthorizationService.AuthorizeAsync(user, blog, "IsResourceOwner");

        if (authorizationResult.Succeeded)
        {
            // Check if the blog has posts
            var posts = await PostService.GetPosts(blog.BlogId);
            if (posts.Any())
            {
                errorMessage = "Please delete all posts in this blog before deleting the blog.";
                StateHasChanged(); // Update the UI to show the error message
                return;
            }

            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Are you sure you want to delete this blog?" });
            if (confirmed)
            {
                await DeleteBlog(blog.BlogId);
                blogs = await BlogService.GetBlogs();
            }
        }
        else
        {
            errorMessage = "You are not authorized to delete this blog.";
        }
    }

    private async Task DeleteBlog(int blogId)
    {
        await BlogService.DeleteBlog(blogId);
        blogs = await BlogService.GetBlogs();
        errorMessage = string.Empty;
    }

    private void ClearErrorMessage()
    {
        errorMessage = string.Empty;
    }
}