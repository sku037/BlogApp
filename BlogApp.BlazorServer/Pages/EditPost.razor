@page "/edit-post/{PostId:int}"
@using BlogApp.BlazorServer.Models
@using BlogApp.BlazorServer.Services
@inject PostService PostService
@inject NavigationManager NavigationManager
@inject IAuthorizationService AuthorizationService
@inject TagService TagService
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Edit Post</h3>

@if (!isAuthenticated)
{
    <p>Please <a href="/login">log in</a> to edit this post.</p>
}
else if (authorizationResult?.Succeeded ?? false)
{
    <EditForm Model="@postEditDto" OnValidSubmit="@HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="postTitle">Title:</label>
            <InputText id="postTitle" class="form-control" @bind-Value="postEditDto.PostTitle" />
        </div>

        <div class="form-group">
            <label for="content">Content:</label>
            <InputTextArea id="content" class="form-control" @bind-Value="postEditDto.Content" />
        </div>

        <div class="form-group">
            <label for="tags">Tags (enter tags separated by commas):</label>
            <InputText id="tags" class="form-control" @bind-Value="tagsAsString" placeholder="Enter tags separated by commas" />
        </div>

        <div class="form-group">
            <label for="image">Image:</label>
            <InputFile id="image" OnChange="@OnImageSelected" accept="image/*" />
            @if (!string.IsNullOrWhiteSpace(postEditDto.ImagePath))
            {
                <img src="@BuildImageUrl(postEditDto.ImagePath)" alt="Current Image" class="current-image" />
            }
        </div>

        <button type="submit" class="btn btn-success">Save Changes</button>
    </EditForm>
}
else
{
    <p>You are not authorized to edit this post.</p>
}

<button class="btn btn-secondary" @onclick="GoBack">Back to Posts</button>

@code {
    [Parameter]
    public int PostId { get; set; }
    private PostEditDto postEditDto;
    private PostDetailDto originalPost;
    private List<TagDto> allTags;
    private string tagsAsString;
    private bool isAuthenticated;
    private AuthorizationResult? authorizationResult;

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        isAuthenticated = authState.User.Identity.IsAuthenticated;
        if (!isAuthenticated)
        {
            string returnUrl = Uri.EscapeDataString(NavigationManager.Uri);
            NavigationManager.NavigateTo("/login?returnUrl=" + returnUrl);
            return;
        }
        try
        {
            originalPost = await PostService.GetPost(PostId);
            allTags = (await TagService.GetAllTags()).ToList();

            if (originalPost != null)
            {
                postEditDto = new PostEditDto
                {
                    PostTitle = originalPost.PostTitle,
                    Content = originalPost.Content,
                    ImagePath = originalPost.ImagePath,
                    Username = originalPost.Username,
                    TagIds = originalPost.Tags?.Select(t => t.TagId).ToList() ?? new List<int>(),
                    TagNames = originalPost.Tags?.Select(t => t.Name).ToList() ?? new List<string>() 
                };
                tagsAsString = String.Join(", ", postEditDto.TagNames); 

                authorizationResult = await AuthorizationService.AuthorizeAsync(authState.User, postEditDto, "IsResourceOwner");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading post: {ex.Message}");
        }
    }

    private async Task HandleSubmit()
    {
        if (authorizationResult?.Succeeded == true)
        {
            postEditDto.TagNames = ParseTags(tagsAsString);

            var result = await PostService.UpdatePost(PostId, postEditDto);
            if (result)
            {
                NavigationManager.NavigateTo($"/blog-posts/{originalPost.BlogId}");
            }
            else
            {
                Console.WriteLine("Error updating post.");
            }
        }
    }

    private List<string> ParseTags(string tags)
    {
        return tags?.Split(new[] { ',', ' ' }, StringSplitOptions.RemoveEmptyEntries)
            .Select(tag => tag.Trim().StartsWith("#") ? tag : $"#{tag}")
            .ToList() ?? new List<string>();
    }

    private async Task OnImageSelected(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;
        if (imageFile != null)
        {
            using var stream = imageFile.OpenReadStream(maxAllowedSize: 10240000); // File size limit 10MB
            byte[] buffer = new byte[imageFile.Size];
            await stream.ReadAsync(buffer);

            // Save image and set the ImagePath in postCreateDto
            var imagePath = await PostService.SaveImageAsync(buffer);
            if (!string.IsNullOrEmpty(imagePath))
            {
                postEditDto.ImagePath = imagePath;
            }
            else
            {
                // Handle the case where image was not saved successfully
                Console.WriteLine("Failed to save image.");
            }
        }
    }

    private string BuildImageUrl(string imagePath)
    {
        if (string.IsNullOrWhiteSpace(imagePath))
            return string.Empty;

    // WebApi url
        string baseApiUrl = "https://localhost:7212"; // Modify this URL based on your actual API URL

    // Form full url
        string formattedImagePath = imagePath.Replace("\\", "/");
        return $"{baseApiUrl}/{formattedImagePath}";
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo($"/blog-posts/{originalPost.BlogId}");
    }
}
