@page "/register"
@using BlogApp.BlazorServer.Models
@inject AuthService AuthService
@inject NavigationManager NavigationManager

<h3>Register</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

<EditForm Model="@registerModel" OnValidSubmit="@HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="username">Username</label>
        <InputText id="username" class="form-control" @bind-Value="registerModel.Username" />
    </div>
    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" @bind-Value="registerModel.Email" />
    </div>

    <div class="form-group">
        <label for="firstName">First Name</label>
        <InputText id="firstName" class="form-control" @bind-Value="registerModel.FirstName" />
    </div>

    <div class="form-group">
        <label for="lastName">Last Name</label>
        <InputText id="lastName" class="form-control" @bind-Value="registerModel.LastName" />
    </div>
    
    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" class="form-control" @bind-Value="registerModel.Password" type="password" />
    </div>

    <div class="form-group">
        <label for="confirmPassword">Confirm Password</label>
        <InputText id="confirmPassword" class="form-control" @bind-Value="registerModel.ConfirmPassword" type="password" />
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@code {
    RegisterModel registerModel = new RegisterModel();
    string errorMessage = "";
    private async Task HandleRegister()
    {
        try
        {
            var result = await AuthService.RegisterUser(registerModel);
            if (result)
            {
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                errorMessage = "Registration failed. Please try again later.";
            }
        }
        catch (HttpRequestException httpEx)
        {
            // Log the exception or handle it as per your application's error handling policy
            errorMessage = $"Error: {httpEx.Message}";
        }
        catch (Exception ex)
        {
            // General exception handling (e.g., if the service is down or there's a network error)
            errorMessage = $"An unexpected error occurred: {ex.Message}";
        }
    }
}