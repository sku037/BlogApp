@page "/create-blog"
@inject BlogService BlogService
@inject NavigationManager NavigationManager
@using BlogApp.BlazorServer.Models
@using System.Security.Claims
@using BlogApp.BlazorServer.Services
@using Microsoft.AspNetCore.Components.Authorization



@code {
    [CascadingParameter]
    Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private BlogCreateDto blogCreateDto = new BlogCreateDto();
    private bool isAuthenticated;
    private string username;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        isAuthenticated = authState.User.Identity.IsAuthenticated;

        if (!isAuthenticated)
        {
            string returnUrl = Uri.EscapeDataString(NavigationManager.Uri);
            NavigationManager.NavigateTo("/login?returnUrl=" + returnUrl);
        }
        else
        {
            username = authState.User.FindFirst(ClaimTypes.Name)?.Value;
            blogCreateDto.Username = username;
        }
    }

    private async Task HandleSubmit()
    {
        var result = await BlogService.CreateBlog(blogCreateDto);
        if (result)
        {
            NavigationManager.NavigateTo("/", true);
        }
        else
        {
    // Handle erros
        }
    }
}

@if (isAuthenticated)
{
    <h3>Create New Blog</h3>

    <EditForm Model="@blogCreateDto" OnValidSubmit="@HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="title">Title:</label>
            <InputText id="title" class="form-control" @bind-Value="blogCreateDto.Title" />
        </div>

        <div class="form-group">
            <label for="description">Description:</label>
            <InputTextArea id="description" class="form-control" @bind-Value="blogCreateDto.Description" />
        </div>

        <button type="submit" class="btn btn-primary">Create</button>
    </EditForm>
}
else
{
    <p>Please <a href="/login">log in</a> to create a blog.</p>
}