@page "/create-post/{BlogId:int}"
@using BlogApp.BlazorServer.Models
@using BlogApp.BlazorServer.Services
@inject PostService PostService
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Authorization

<h3>Create Post</h3>

<EditForm Model="@postCreateDto" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="postTitle">Post Title:</label>
        <InputText id="postTitle" class="form-control" @bind-Value="postCreateDto.PostTitle" />
    </div>

    <div class="form-group">
        <label for="content">Content:</label>
        <InputTextArea id="content" class="form-control" @bind-Value="postCreateDto.Content" />
    </div>

    <div class="form-group">
        <label for="tags">Tags:</label>
        <InputText id="tags" class="form-control" @bind-Value="tagsInput" placeholder="Enter tags separated by commas" />
    </div>
    
    <div class="form-group">
        <label for="image">Image:</label>
        <InputFile id="image" OnChange="@OnImageSelected" accept="image/*" />
    </div>

    <button type="submit" class="btn btn-primary">Create</button>
</EditForm>

@code {
    [Parameter] 
    public int BlogId { get; set; } 
    private PostCreateDto postCreateDto = new PostCreateDto();
    private string tagsInput;

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        if (!authState.User.Identity.IsAuthenticated)
        {
            string returnUrl = Uri.EscapeDataString(NavigationManager.Uri);
            NavigationManager.NavigateTo("/login?returnUrl=" + returnUrl);
        }
        else
        {
            postCreateDto.BlogId = BlogId;
        }
    }

    private async Task HandleSubmit()
    {
        var tagNames = ParseTags(tagsInput);
        postCreateDto.TagNames = tagNames;
        
        var result = await PostService.CreatePost(postCreateDto);
        if (result)
        {
            NavigationManager.NavigateTo($"/blog-posts/{BlogId}", true);
        }
        else
        {
    // handle error
        }
    }

    private List<string> ParseTags(string tags)
    {
        return tags?.Split(new[] { ',', ' ' }, StringSplitOptions.RemoveEmptyEntries)
            .Select(tag => tag.Trim().StartsWith("#") ? tag : $"#{tag}")
            .ToList() ?? new List<string>();
    }
    
    private async Task OnImageSelected(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;
        if (imageFile != null)
        {
            using var stream = imageFile.OpenReadStream(maxAllowedSize: 10240000); // File size limit 10MB
            byte[] buffer = new byte[imageFile.Size];
            await stream.ReadAsync(buffer);
    
            // Save image and set the ImagePath in postCreateDto
            var imagePath = await PostService.SaveImageAsync(buffer);
            if (!string.IsNullOrEmpty(imagePath))
            {
                postCreateDto.ImagePath = imagePath;
            }
            else
            {
    // Handle the case where image was not saved successfully
                Console.WriteLine("Failed to save image.");
            }
        }
    }


}