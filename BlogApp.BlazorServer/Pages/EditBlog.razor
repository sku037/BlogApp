@page "/edit-blog/{BlogId:int}"
@inject BlogService BlogService
@inject NavigationManager NavigationManager
@inject IAuthorizationService AuthorizationService
@using BlogApp.BlazorServer.Models
@using BlogApp.BlazorServer.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Edit Blog</h3>

@if (isAuthenticated)
{
    if (authorizationResult?.Succeeded ?? false)
    {
        <EditForm Model="@blogEditDto" OnValidSubmit="@HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="title">Title:</label>
                <InputText id="title" class="form-control" @bind-Value="blogEditDto.Title" />
            </div>

            <div class="form-group">
                <label for="description">Description:</label>
                <InputTextArea id="description" class="form-control" @bind-Value="blogEditDto.Description" />
            </div>

            <button type="submit" class="btn btn-success">Save Changes</button>
        </EditForm>
    }
    else
    {
        <p>You are not authorized to edit this blog.</p>
        <button class="btn btn-secondary" @onclick="GoBack">Back to Blogs</button>
    }
}
else
{
<p>Please <a href="/login">log in</a> to edit a blog.</p>
}

@code {
    [Parameter]
    public int BlogId { get; set; }
    private BlogEditDto blogEditDto = new BlogEditDto();
    private AuthorizationResult? authorizationResult;
    private bool isAuthenticated;

    [CascadingParameter]
    Task<AuthenticationState> AuthenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        isAuthenticated = authState.User.Identity.IsAuthenticated;

        if (!isAuthenticated)
        {
            string returnUrl = Uri.EscapeDataString(NavigationManager.Uri);
            NavigationManager.NavigateTo("/login?returnUrl=" + returnUrl);
            return;
        }

        blogEditDto = await BlogService.GetBlog(BlogId);
        authorizationResult = await AuthorizationService.AuthorizeAsync(authState.User, blogEditDto, "IsResourceOwner");
    }

    private async Task HandleSubmit()
    {
        if (authorizationResult?.Succeeded == true)
        {
            await BlogService.UpdateBlog(BlogId, blogEditDto);
            NavigationManager.NavigateTo("/");
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/");
    }
}
