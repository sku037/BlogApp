@using BlogApp.BlazorServer.Models
@using BlogApp.BlazorServer.Services
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SearchService SearchService

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">BlogApp.BlazorServer</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Blogs
            </NavLink>
        </div>
        @if (isUserAuthenticated)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="user-profile">
                    <span class="oi oi-person" aria-hidden="true"></span> User Profile
                </NavLink>
            </div>
        }
        <hr /> <!-- Dividing line -->
        <div class="search-container px-3">
            <input class="form-control" type="text" placeholder="Search" @bind="searchQuery" />
            <button class="btn btn-outline-success mt-2" @onclick="PerformSearch">Search</button>
        </div>
        <!-- Search results can be displayed here -->
        @if (searchResults != null && searchResults.Any())
        {
            <div class="search-results-container px-3 mt-2">
                @foreach (var post in searchResults)
                {
                    <div class="search-result-item">
                        <NavLink class="nav-link" href="@($"/post-details/{post.PostId}/{post.BlogId}")">@post.PostTitle</NavLink>
                    </div>
                }
            </div>
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private string searchQuery;
    private IEnumerable<PostDto> searchResults;
    private bool isUserAuthenticated;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override void OnInitialized()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += HandleAuthenticationStateChanged;
    }

    private async void HandleAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        var authState = await task;
        isUserAuthenticated = authState.User.Identity.IsAuthenticated;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UpdateUserAuthenticationState();
        }
    }

    private async Task UpdateUserAuthenticationState()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isUserAuthenticated = authState.User.Identity.IsAuthenticated;
    }

    private async Task PerformSearch()
    {
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            // Search logic
        }
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= HandleAuthenticationStateChanged;
    }
}
